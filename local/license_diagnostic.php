<?php
/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Bitrix24
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
 * 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É /local/ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 * 2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: https://your-domain.com/local/license_diagnostic.php
 * 3. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É: php /path/to/license_diagnostic.php
 */

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä
$isConsole = php_sapi_name() === 'cli';

if (!$isConsole) {
    // –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä - –ø–æ–¥–∫–ª—é—á–∞–µ–º Bitrix
    require_once($_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_before.php");
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!$USER->IsAdmin()) {
        die("Access denied. Admin rights required.");
    }
    
    header('Content-Type: text/html; charset=utf-8');
    echo "<html><head><meta charset='utf-8'><title>License Diagnostic</title></head><body>";
    echo "<h1>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ Bitrix24</h1>";
} else {
    // –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
    define("NO_KEEP_STATISTIC", true);
    define("NOT_CHECK_PERMISSIONS", true);
    require_once(__DIR__ . "/../bitrix/modules/main/include/prolog_before.php");
}

function output($text, $isHtml = false) {
    global $isConsole;
    if ($isConsole) {
        echo strip_tags($text) . "\n";
    } else {
        echo $isHtml ? $text : nl2br(htmlspecialchars($text)) . "<br>";
    }
}

function heading($text) {
    global $isConsole;
    if ($isConsole) {
        echo "\n" . str_repeat("=", 50) . "\n";
        echo $text . "\n";
        echo str_repeat("=", 50) . "\n";
    } else {
        echo "<h2 style='color: #0066cc; margin-top: 30px;'>" . htmlspecialchars($text) . "</h2>";
    }
}

try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
    $license = \Bitrix\Main\Application::getInstance()->getLicense();
    $connection = \Bitrix\Main\Application::getConnection();
    
    heading("1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—Ü–µ–Ω–∑–∏–∏");
    
    $maxUsers = $license->getMaxUsers();
    $activeUsers = $license->getActiveUsersCount();
    $licenseName = $license->getName();
    $licenseKey = $license->getKey();
    
    output("–ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏: " . ($maxUsers == 0 ? "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" : $maxUsers));
    output("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: " . $activeUsers);
    output("–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏: " . $licenseName);
    output("–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á: " . substr($licenseKey, 0, 20) . "...");
    output("–î–µ–º–æ-–ª–∏—Ü–µ–Ω–∑–∏—è: " . ($license->isDemo() ? '–î–∞' : '–ù–µ—Ç'));
    output("–ü–æ–¥—Å—á–µ—Ç —ç–∫—Å—Ç—Ä–∞–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . ($license->isExtraCountable() ? '–î–∞' : '–ù–µ—Ç'));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    heading("2. –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞");
    
    if ($maxUsers == 0) {
        output("‚úÖ –°–¢–ê–¢–£–°: –õ–∏–º–∏—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è)");
    } else {
        if ($activeUsers <= $maxUsers) {
            output("‚úÖ –°–¢–ê–¢–£–°: –õ–∏–º–∏—Ç –ù–ï –ø—Ä–µ–≤—ã—à–µ–Ω ({$activeUsers} –∏–∑ {$maxUsers})");
        } else {
            output("‚ùå –°–¢–ê–¢–£–°: –õ–ò–ú–ò–¢ –ü–†–ï–í–´–®–ï–ù! ({$activeUsers} –∏–∑ {$maxUsers})");
            output("‚ö†Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ " . ($activeUsers - $maxUsers) . " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        }
    }
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    heading("3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    
    // –ò–Ω—Ç—Ä–∞–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    $intranetSql = "
        SELECT COUNT(DISTINCT U.ID) as count
        FROM b_user U
            INNER JOIN b_user_field F ON F.ENTITY_ID = 'USER' AND F.FIELD_NAME = 'UF_DEPARTMENT'
            INNER JOIN b_utm_user UF ON UF.FIELD_ID = F.ID AND UF.VALUE_ID = U.ID AND UF.VALUE_INT > 0
        WHERE U.ACTIVE = 'Y' AND U.LAST_LOGIN IS NOT NULL
    ";
    $intranetCount = $connection->queryScalar($intranetSql);
    output("–ò–Ω—Ç—Ä–∞–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å –ª–æ–≥–∏–Ω–æ–º): " . $intranetCount);
    
    // –≠–∫—Å—Ç—Ä–∞–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    $extranetSql = "
        SELECT COUNT(*) as count
        FROM b_user U
            INNER JOIN b_extranet_user EU ON EU.USER_ID = U.ID AND EU.CHARGEABLE = 'Y'
        WHERE U.ACTIVE = 'Y' AND U.LAST_LOGIN IS NOT NULL
    ";
    try {
        $extranetCount = $connection->queryScalar($extranetSql);
        output("–≠–∫—Å—Ç—Ä–∞–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–ª–∞—Ç–Ω—ã–µ): " . $extranetCount);
    } catch (Exception $e) {
        output("–≠–∫—Å—Ç—Ä–∞–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –º–æ–¥—É–ª—å extranet –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    $totalActiveSql = "SELECT COUNT(*) FROM b_user WHERE ACTIVE = 'Y'";
    $totalActive = $connection->queryScalar($totalActiveSql);
    
    $withLoginSql = "SELECT COUNT(*) FROM b_user WHERE ACTIVE = 'Y' AND LAST_LOGIN IS NOT NULL";
    $withLogin = $connection->queryScalar($withLoginSql);
    
    output("–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . $totalActive);
    output("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–æ–≥–∏–Ω–æ–º: " . $withLogin);
    output("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ª–æ–≥–∏–Ω–∞: " . ($totalActive - $withLogin));
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–∑ –ë–î
    heading("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ –ë–î");
    
    $optionsSql = "
        SELECT NAME, VALUE 
        FROM b_option 
        WHERE MODULE_ID = 'main' 
            AND NAME IN ('PARAM_MAX_USERS', '~license_name', '~license_codes', '~COUNT_EXTRA', '~PARAM_MAX_USERS')
        ORDER BY NAME
    ";
    $options = $connection->query($optionsSql);
    
    while ($option = $options->fetch()) {
        $name = $option['NAME'];
        $value = $option['VALUE'];
        
        switch ($name) {
            case 'PARAM_MAX_USERS':
                output("–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " . ($value == '0' ? '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' : $value));
                break;
            case '~license_name':
                output("–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏: " . $value);
                break;
            case '~license_codes':
                output("–ö–æ–¥—ã –ª–∏—Ü–µ–Ω–∑–∏–∏: " . $value);
                break;
            case '~COUNT_EXTRA':
                output("–ü–æ–¥—Å—á–µ—Ç —ç–∫—Å—Ç—Ä–∞–Ω–µ—Ç: " . ($value == 'Y' ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'));
                break;
            case '~PARAM_MAX_USERS':
                output("–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç: " . substr($value, 0, 20) . "...");
                break;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    heading("5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    
    $notifySql = "
        SELECT ID, MODULE_ID, TAG, LEFT(MESSAGE, 100) as message_preview, ENABLE_CLOSE
        FROM b_admin_notify 
        WHERE MESSAGE LIKE '%exceeded%' 
            OR MESSAGE LIKE '%maximum%' 
            OR MESSAGE LIKE '%users%' 
            OR MESSAGE LIKE '%license%'
            OR MESSAGE LIKE '%–ø—Ä–µ–≤—ã—à–µ–Ω%'
            OR MESSAGE LIKE '%–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π%'
        ORDER BY ID DESC
        LIMIT 5
    ";
    
    $notifications = $connection->query($notifySql);
    $notifyCount = 0;
    
    while ($notify = $notifications->fetch()) {
        $notifyCount++;
        output("ID: {$notify['ID']}, –ú–æ–¥—É–ª—å: {$notify['MODULE_ID']}, –°–æ–æ–±—â–µ–Ω–∏–µ: {$notify['message_preview']}...");
    }
    
    if ($notifyCount == 0) {
        output("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }
    
    // Bitrix24 —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (class_exists('CBitrix24')) {
        heading("6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è Bitrix24");
        
        if (method_exists('CBitrix24', 'getLicenseType')) {
            output("–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ B24: " . CBitrix24::getLicenseType());
        }
        if (method_exists('CBitrix24', 'getPortalZone')) {
            output("–ó–æ–Ω–∞ –ø–æ—Ä—Ç–∞–ª–∞: " . CBitrix24::getPortalZone());
        }
        if (method_exists('CBitrix24', 'IsLicensePaid')) {
            output("–ü–ª–∞—Ç–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è: " . (CBitrix24::IsLicensePaid() ? '–î–∞' : '–ù–µ—Ç'));
        }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    heading("7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
    
    if ($maxUsers > 0 && $activeUsers > $maxUsers) {
        output("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–ï–ô–°–¢–í–ò–ï:");
        output("1. –û–±–Ω–æ–≤–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        output("2. –ò–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        output("3. –ò–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)");
    } else {
        output("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π");
        if ($maxUsers > 0) {
            output("–ó–∞–ø–∞—Å: " . ($maxUsers - $activeUsers) . " –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        }
    }
    
    heading("8. SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏");
    
    if (!$isConsole) {
        echo "<textarea style='width:100%; height:300px; font-family:monospace;'>";
    }
    
    output("-- –ü–æ–¥—Å—á–µ—Ç –∏–Ω—Ç—Ä–∞–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", false);
    output($intranetSql, false);
    output("", false);
    output("-- –ü–æ–¥—Å—á–µ—Ç —ç–∫—Å—Ç—Ä–∞–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", false);
    output($extranetSql, false);
    output("", false);
    output("-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏", false);
    output($optionsSql, false);
    output("", false);
    output("-- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", false);
    output($notifySql, false);
    
    if (!$isConsole) {
        echo "</textarea>";
    }
    
} catch (Exception $e) {
    heading("–û–®–ò–ë–ö–ê");
    output("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:");
    output($e->getMessage());
    output("–§–∞–π–ª: " . $e->getFile() . ":" . $e->getLine());
}

if (!$isConsole) {
    echo "<p style='margin-top: 30px; color: #666;'>";
    echo "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . date('Y-m-d H:i:s');
    echo "</p></body></html>";
} else {
    echo "\n–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " . date('Y-m-d H:i:s') . "\n";
}
?>
